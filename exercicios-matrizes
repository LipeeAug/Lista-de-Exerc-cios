# Exercício 1:
def exercicio1():
    numbers = []
    more_than_10 = 0
    
    print("Digite 16 números:")
    for i in range(16):
        numbers.append(float(input()))
    
    for num in numbers:
        if num > 10:
            more_than_10 += 1
    
    print(f"Quantidade de números maiores que 10: {more_than_10}")

exercicio1()
___________________________________________________________________________________________________
# Exercício 2:
def exercicio2():
    matriz = [[0]*5 for _ in range(5)]
    
    for i in range(5):
        for j in range(5):
            if i == j:
                matriz[i][j] = 1
            else:
                matriz[i][j] = 0
    
    print("Matriz 5x5 com 1 na diagonal principal e 0 nos demais elementos:")
    for linha in matriz:
        print(' '.join(map(str, linha)))

exercicio2()
___________________________________________________________________________________________________
# Exercício 3:
def exercicio3():
    rows = 5
    cols = 5
    matriz = [[0]*cols for _ in range(rows)]
    
    for i in range(rows):
        for j in range(cols):
            matriz[i][j] = i * j
    
    print("Matriz preenchida com o produto da linha e da coluna de cada elemento:")
    for linha in matriz:
        print('\t'.join(map(str, linha)))

exercicio3()
___________________________________________________________________________________________________
# Exercício 4:
def exercicio4():
    rows = 4
    cols = 4
    matriz = [[0]*cols for _ in range(rows)]
    
    print("Digite os valores da matriz 4x4:")
    for i in range(rows):
        for j in range(cols):
            matriz[i][j] = int(input(f"Elemento [{i}][{j}]: "))
    
    print("\nMatriz 4x4:")
    for linha in matriz:
        print('\t'.join(map(str, linha)))
    
    maior_valor = matriz[0][0]
    linha_maior = 0
    coluna_maior = 0
    
    for i in range(rows):
        for j in range(cols):
            if matriz[i][j] > maior_valor:
                maior_valor = matriz[i][j]
                linha_maior = i
                coluna_maior = j
    
    print(f"\nO maior valor na matriz é: {maior_valor}")
    print(f"Localizado na linha {linha_maior} e coluna {coluna_maior}")

exercicio4()
___________________________________________________________________________________________________
# Exercício 5:
def exercicio5():
    rows = 5
    cols = 5
    matriz = [[0]*cols for _ in range(rows)]
    
    print("Digite os valores da matriz 5x5:")
    for i in range(rows):
        for j in range(cols):
            matriz[i][j] = int(input(f"Elemento [{i}][{j}]: "))
    
    X = int(input("\nDigite o valor a ser buscado na matriz: "))
    
    encontrado = False
    linha_X = -1
    coluna_X = -1
    
    for i in range(rows):
        for j in range(cols):
            if matriz[i][j] == X:
                encontrado = True
                linha_X = i
                coluna_X = j
                break
        if encontrado:
            break
    
    if encontrado:
        print(f"\nO valor {X} foi encontrado na linha {linha_X} e coluna {coluna_X}.")
    else:
        print(f"\nValor {X} não encontrado na matriz.")

exercicio5()
___________________________________________________________________________________________________
# Exercício 6:
def exercicio6():
    rows = 4
    cols = 4
    matriz1 = [[0]*cols for _ in range(rows)]
    matriz2 = [[0]*cols for _ in range(rows)]
    matriz_maior = [[0]*cols for _ in range(rows)]
    
    print("Digite os valores da primeira matriz 4x4:")
    for i in range(rows):
        for j in range(cols):
            matriz1[i][j] = int(input(f"Matriz1[{i}][{j}]: "))
    
    print("\nDigite os valores da segunda matriz 4x4:")
    for i in range(rows):
        for j in range(cols):
            matriz2[i][j] = int(input(f"Matriz2[{i}][{j}]: "))
    
    for i in range(rows):
        for j in range(cols):
            if matriz1[i][j] > matriz2[i][j]:
                matriz_maior[i][j] = matriz1[i][j]
            else:
                matriz_maior[i][j] = matriz2[i][j]
    
    print("\nMatriz resultante com os maiores valores de cada posição:")
    for linha in matriz_maior:
        print('\t'.join(map(str, linha)))

exercicio6()
___________________________________________________________________________________________________
# Exercício 7:
def exercicio7():
    size = 10
    matriz = [[0]*size for _ in range(size)]
    
    for i in range(size):
        for j in range(size):
            if i < j:
                matriz[i][j] = 2 * i + 7 * j
            elif i == j:
                matriz[i][j] = 3 * (i ** 2) + 1
            else:
                matriz[i][j] = 4 * (i ** 3) + 5 * (j ** 2) + 1
    
    print("Matriz 10x10 gerada:")
    for linha in matriz:
        print('\t'.join(map(str, linha)))

exercicio7()
___________________________________________________________________________________________________
# Exercício 8:
def exercicio8():
    size = 3
    matriz = [[0]*size for _ in range(size)]
    
    print("Digite os valores da matriz 3x3:")
    for i in range(size):
        for j in range(size):
            matriz[i][j] = int(input(f"Elemento [{i}][{j}]: "))
    
    soma = 0
    for i in range(size):
        for j in range(i + 1, size):
            soma += matriz[i][j]
    
    print(f"\nA soma dos elementos acima da diagonal principal é: {soma}")

exercicio8()
___________________________________________________________________________________________________
# Exercício 9:
def exercicio9():
    size = 3
    matriz = [[0]*size for _ in range(size)]
    
    print("Digite os valores da matriz 3x3:")
    for i in range(size):
        for j in range(size):
            matriz[i][j] = int(input(f"Elemento [{i}][{j}]: "))
    
    soma = 0
    for i in range(1, size):
        for j in range(i):
            soma += matriz[i][j]
    
    print(f"\nA soma dos elementos abaixo da diagonal principal é: {soma}")

exercicio9()
___________________________________________________________________________________________________
# Exercício 10:
def exercicio10():
    size = 3
    matriz = [[0]*size for _ in range(size)]
    
    print("Digite os valores da matriz 3x3:")
    for i in range(size):
        for j in range(size):
            matriz[i][j] = int(input(f"Elemento [{i}][{j}]: "))
    
    soma = 0
    for i in range(size):
        soma += matriz[i][i]
    
    print(f"\nA soma dos elementos na diagonal principal é: {soma}")

exercicio10()
___________________________________________________________________________________________________
# Exercício 11:
def exercicio11():
    size = 3
    matriz = [[0]*size for _ in range(size)]
    
    print("Digite os valores da matriz 3x3:")
    for i in range(size):
        for j in range(size):
            matriz[i][j] = int(input(f"Elemento [{i}][{j}]: "))
    
    soma = 0
    for i in range(size):
        soma += matriz[i][size - 1 - i]
    
    print("\nMatriz inserida:")
    for linha in matriz:
        print('\t'.join(map(str, linha)))
    
    print(f"\nA soma dos elementos da diagonal secundária é: {soma}")

exercicio11()
___________________________________________________________________________________________________
# Exercício 12:
def main():
    size = 3
    matriz = [[0] * size for _ in range(size)]
    transposta = [[0] * size for _ in range(size)]

    print("Digite os valores da matriz 3x3:")
    for i in range(size):
        for j in range(size):
            matriz[i][j] = int(input(f"Elemento [{i}][{j}]: "))

    for i in range(size):
        for j in range(size):
            transposta[j][i] = matriz[i][j]

    print("\nMatriz original:")
    for row in matriz:
        print("\t".join(map(str, row)))

    print("\nMatriz transposta:")
    for row in transposta:
        print("\t".join(map(str, row)))

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
# Exercício 13:
import random

def gerar_numero_aleatorio():
    return random.randint(1, 20)

def main():
    tamanho = 4
    matriz = [[gerar_numero_aleatorio() for _ in range(tamanho)] for _ in range(tamanho)]

    print("Matriz original:")
    for row in matriz:
        print("\t".join(map(str, row)))

    for i in range(tamanho):
        for j in range(i + 1, tamanho):
            matriz[i][j] = 0

    print("\nMatriz transformada em triangular inferior:")
    for row in matriz:
        print("\t".join(map(str, row)))

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
# Exercício 14:
import random

def embaralhar_numeros(numeros):
    random.shuffle(numeros)

def main():
    linhas = 5
    colunas = 5
    total_numeros = 100

    numeros = list(range(total_numeros))
    embaralhar_numeros(numeros)

    print("Cartela de Bingo Gerada:")
    for i in range(linhas):
        print("\t".join(map(str, numeros[i * colunas:(i + 1) * colunas])))

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
# Exercício 15
def calcular_pontuacao(respostas_aluno, gabarito):
    pontuacao = 0
    for resposta, gabarito_item in zip(respostas_aluno, gabarito):
        if resposta == gabarito_item:
            pontuacao += 1
    return pontuacao

def main():
    NUM_ALUNOS = 5
    NUM_QUESTOES = 10

    gabarito = []
    print("Digite o gabarito de respostas (use a, b, c ou d):")
    for i in range(NUM_QUESTOES):
        gabarito.append(input(f"Questao {i + 1}: "))

    respostas_alunos = []
    print(f"\nDigite as respostas dos {NUM_ALUNOS} alunos:")
    for i in range(NUM_ALUNOS):
        respostas_aluno = []
        print(f"Aluno {i + 1}:")
        for j in range(NUM_QUESTOES):
            resposta = input(f"Resposta para questao {j + 1}: ")
            respostas_aluno.append(resposta)
        respostas_alunos.append(respostas_aluno)

    print("\nPontuacao dos alunos:")
    for i, respostas_aluno in enumerate(respostas_alunos):
        pontuacao = calcular_pontuacao(respostas_aluno, gabarito)
        print(f"Aluno {i + 1}: {pontuacao} pontos")

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
#Exercício 16
def calcular_nota(respostas_aluno, gabarito):
    nota = 0
    for resposta, gabarito_item in zip(respostas_aluno, gabarito):
        if resposta == gabarito_item:
            nota += 1
    return nota

def main():
    NUM_QUESTOES = 10
    NUM_ALUNOS = 3

    gabarito = ['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']

    matriculas = []
    respostas_alunos = []
    notas = []

    print(f"Digite as respostas dos {NUM_ALUNOS} alunos:")
    for i in range(NUM_ALUNOS):
        matricula = input(f"Matricula do Aluno {i + 1}: ")
        matriculas.append(matricula)
        respostas_aluno = []
        for j in range(NUM_QUESTOES):
            resposta = input(f"Resposta para questao {j + 1}: ")
            respostas_aluno.append(resposta)
        respostas_alunos.append(respostas_aluno)

    print("\nResultados dos alunos:")
    for i in range(NUM_ALUNOS):
        nota = calcular_nota(respostas_alunos[i], gabarito)
        notas.append(nota)
        print(f"Aluno {i + 1}:")
        print(f"Matricula: {matriculas[i]}")
        print(f"Respostas: {' '.join(respostas_alunos[i])}")
        print(f"Nota: {nota}")

    total_notas = sum(notas)
    media = total_notas / NUM_ALUNOS
    percentual_aprovacao = 100.0 if media >= 7.0 else (media / 7.0) * 100.0

    print(f"\nPercentual de aprovacao na turma: {percentual_aprovacao:.2f}%")

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
# Exercício 17
def main():
    NUM_ALUNOS = 10
    NUM_PROVAS = 3

    notas = []
    for i in range(NUM_ALUNOS):
        notas_aluno = []
        for j in range(NUM_PROVAS):
            nota = float(input(f"Nota do aluno {i + 1} na prova {j + 1}: "))
            notas_aluno.append(nota)
        notas.append(notas_aluno)

    pior_nota_prova1 = 0
    pior_nota_prova2 = 0
    pior_nota_prova3 = 0

    for i in range(NUM_ALUNOS):
        pior_nota = min(notas[i])
        if pior_nota == notas[i][0]:
            pior_nota_prova1 += 1
        elif pior_nota == notas[i][1]:
            pior_nota_prova2 += 1
        else:
            pior_nota_prova3 += 1

    print("\nQuantidade de alunos cuja pior nota foi em cada prova:")
    print(f"Prova 1: {pior_nota_prova1} alunos")
    print(f"Prova 2: {pior_nota_prova2} alunos")
    print(f"Prova 3: {pior_nota_prova3} alunos")

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
# Exercício 18
def main():
    matriz = []
    for i in range(3):
        linha = []
        for j in range(3):
            linha.append(int(input(f"Digite o valor para matriz[{i}][{j}]: ")))
        matriz.append(linha)

    soma_colunas = [sum(matriz[i][j] for i in range(3)) for j in range(3)]

    print("\nMatriz:")
    for linha in matriz:
        print("\t".join(map(str, linha)))

    print("\nArray unidimensional pela soma das colunas:")
    print(soma_colunas)

if __name__ == "__main__":
    main()

___________________________________________________________________________________________________
# Exercício 19
def main():
    alunos = []
    for i in range(5):
        aluno = []
        matricula = int(input(f"Digite a matrícula do aluno {i + 1}: "))
        media_provas = int(input(f"Digite a média das provas do aluno {i + 1}: "))
        media_trabalhos = int(input(f"Digite a média dos trabalhos do aluno {i + 1}: "))
        nota_final = media_provas + media_trabalhos
        aluno.extend([matricula, media_provas, media_trabalhos, nota_final])
        alunos.append(aluno)

    maior_nota_final = max(alunos, key=lambda x: x[3])
    media_aritmetica_notas_finais = sum(aluno[3] for aluno in alunos) / len(alunos)

    print(f"\nA matrícula do aluno com a maior nota final é: {maior_nota_final[0]}")
    print(f"A média aritmética das notas finais é: {media_aritmetica_notas_finais:.2f}")

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
# Exercício 20
def main():
    matriz = []
    for i in range(3):
        linha = []
        for j in range(6):
            linha.append(float(input(f"Digite o valor para matriz[{i}][{j}]: ")))
        matriz.append(linha)

    soma_colunas_impares = sum(matriz[i][j] for i in range(3) for j in [0, 2, 4])
    media_segunda_quarta_colunas = sum(matriz[i][1] + matriz[i][3] for i in range(3)) / 6

    for i in range(3):
        matriz[i][5] = matriz[i][0] + matriz[i][1]

    print(f"\nSoma de todos os elementos das colunas ímpares: {soma_colunas_impares}")
    print(f"Média aritmética dos elementos da segunda e quarta colunas: {media_segunda_quarta_colunas:.2f}")

    print("\nMatriz modificada:")
    for linha in matriz:
        print("\t".join(map(str, linha)))

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
# Exercício 21
def imprimir_matriz(matriz):
    for linha in matriz:
        print("\t".join(map(str, linha)))

def main():
    matriz1 = []
    matriz2 = []
    for i in range(2):
        linha = [float(input(f"Digite o valor para matriz1[{i}][{j}]: ")) for j in range(2)]
        matriz1.append(linha)
    
    for i in range(2):
        linha = [float(input(f"Digite o valor para matriz2[{i}][{j}]: ")) for j in range(2)]
        matriz2.append(linha)

    while True:
        print("\nMenu de opções:")
        print("1. Somar as duas matrizes")
        print("2. Subtrair a primeira matriz da segunda")
        print("3. Adicionar uma constante às duas matrizes")
        print("4. Imprimir as matrizes")
        print("5. Sair")
        
        opcao = int(input("Escolha uma opção: "))
        
        if opcao == 1:
            matriz_soma = [[matriz1[i][j] + matriz2[i][j] for j in range(2)] for i in range(2)]
            print("\nResultado da soma das matrizes:")
            imprimir_matriz(matriz_soma)
        elif opcao == 2:
            matriz_subtracao = [[matriz2[i][j] - matriz1[i][j] for j in range(2)] for i in range(2)]
            print("\nResultado da subtração da primeira matriz da segunda:")
            imprimir_matriz(matriz_subtracao)
        elif opcao == 3:
            constante = float(input("Digite a constante: "))
            matriz1 = [[matriz1[i][j] + constante for j in range(2)] for i in range(2)]
            matriz2 = [[matriz2[i][j] + constante for j in range(2)] for i in range(2)]
            print("\nMatrizes após adicionar a constante:")
            print("Matriz 1:")
            imprimir_matriz(matriz1)
            print("Matriz 2:")
            imprimir_matriz(matriz2)
        elif opcao == 4:
            print("\nMatriz 1:")
            imprimir_matriz(matriz1)
            print("Matriz 2:")
            imprimir_matriz(matriz2)
        elif opcao == 5:
            break
        else:
            print("Opção inválida. Tente novamente.")

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
#Exercício 22
def multiplicar_matrizes(A, B):
    tamanho = len(A)
    C = [[sum(A[i][k] * B[k][j] for k in range(tamanho)) for j in range(tamanho)] for i in range(tamanho)]
    return C

def main():
    A = []
    B = []
    for i in range(3):
        linha = [int(input(f"Digite o valor para A[{i}][{j}]: ")) for j in range(3)]
        A.append(linha)
    
    for i in range(3):
        linha = [int(input(f"Digite o valor para B[{i}][{j}]: ")) for j in range(3)]
        B.append(linha)
    
    C = multiplicar_matrizes(A, B)
    
    print("\nResultado da multiplicação das matrizes A e B:")
    for linha in C:
        print("\t".join(map(str, linha)))

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
#Exercício 23
def multiplicar_matriz(A, B):
    tamanho = len(A)
    C = [[sum(A[i][k] * B[k][j] for k in range(tamanho)) for j in range(tamanho)] for i in range(tamanho)]
    return C

def main():
    A = []
    for i in range(3):
        linha = [int(input(f"Digite o valor para A[{i}][{j}]: ")) for j in range(3)]
        A.append(linha)
    
    B = multiplicar_matriz(A, A)
    
    print("\nResultado de B = A^2:")
    for linha in B:
        print("\t".join(map(str, linha)))

if __name__ == "__main__":
    main()
___________________________________________________________________________________________________
Exercício 24
import random
import time

SIZE = 3

def verificar_vitoria_imediata(tabuleiro, jogador):
    for i in range(SIZE):
        if tabuleiro[i][0] == jogador and tabuleiro[i][1] == jogador and tabuleiro[i][2] == 0:
            return (i, 2)
        if tabuleiro[i][0] == jogador and tabuleiro[i][2] == jogador and tabuleiro[i][1] == 0:
            return (i, 1)
        if tabuleiro[i][1] == jogador and tabuleiro[i][2] == jogador and tabuleiro[i][0] == 0:
            return (i, 0)

    for j in range(SIZE):
        if tabuleiro[0][j] == jogador and tabuleiro[1][j] == jogador and tabuleiro[2][j] == 0:
            return (2, j)
        if tabuleiro[0][j] == jogador and tabuleiro[2][j] == jogador and tabuleiro[1][j] == 0:
            return (1, j)
        if tabuleiro[1][j] == jogador and tabuleiro[2][j] == jogador and tabuleiro[0][j] == 0:
            return (0, j)

    if tabuleiro[0][0] == jogador and tabuleiro[1][1] == jogador and tabuleiro[2][2] == 0:
        return (2, 2)
    if tabuleiro[0][0] == jogador and tabuleiro[2][2] == jogador and tabuleiro[1][1] == 0:
        return (1, 1)
    if tabuleiro[1][1] == jogador and tabuleiro[2][2] == jogador and tabuleiro[0][0] == 0:
        return (0, 0)

    if tabuleiro[0][2] == jogador and tabuleiro[1][1] == jogador and tabuleiro[2][0] == 0:
        return (2, 0)
    if tabuleiro[0][2] == jogador and tabuleiro[2][0] == jogador and tabuleiro[1][1] == 0:
        return (1, 1)
    if tabuleiro[1][1] == jogador and tabuleiro[2][0] == jogador and tabuleiro[0][2] == 0:
        return (0, 2)

    return (-1, -1)

def bloquear_vitoria_oponente(tabuleiro):
    return verificar_vitoria_imediata(tabuleiro, 1)

def escolher_jogada_aleatoria(tabuleiro):
    jogadas_disponiveis = []

    for i in range(SIZE):
        for j in range(SIZE):
            if tabuleiro[i][j] == 0:
                jogadas_disponiveis.append((i, j))

    if jogadas_disponiveis:
        random.seed(time.time())
        indice = random.randint(0, len(jogadas_disponiveis) - 1)
        return jogadas_disponiveis[indice]

    return (-1, -1)

def main():
    tabuleiro = [
        [-1, 1, 1],
        [-1, -1, 0],
        [0, 1, 0]
    ]

    jogada = verificar_vitoria_imediata(tabuleiro, -1)

    if jogada == (-1, -1):
        jogada = bloquear_vitoria_oponente(tabuleiro)

        if jogada == (-1, -1):
            jogada = escolher_jogada_aleatoria(tabuleiro)

    if jogada != (-1, -1):
        print(f"Próxima jogada: ({jogada[0]}, {jogada[1]})")
    else:
        print("Não foi possível determinar uma próxima jogada válida.")

if __name__ == "__main__":
    main()
